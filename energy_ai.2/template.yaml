AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sample SAM Template for Enery AI Assistant

Globals:
  Function:
    Runtime: python3.9
    Timeout: 900
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst

Parameters:
  DataBucket: # s3 bucket name
    Type: String
    Default: 'aws-toys-data-input'
    
  BedrockModelId:
    Description: Amazon Bedrock Model Id
    Type: String
    Default: 'cohere.command-text-v14' # 'anthropic.claude-v2:1'   
    
  NotificationSNSTopicName:
    Description: 'Lambda will send notification email to this SNS topic'
    Type: String
    Default: 'sns-data-alert'
    
  ReportSNSTopicName:
    Description: 'Lambda will send notification email to this SNS topic'
    Type: String
    Default: 'sns-data-report'
    
  NotificationEmail:
    Description: 'Notification email will be sent to this email address'
    Type: String
    
  NotiDB:
    Description: 'Notification history will be sent to this DynamoDB'
    Type: String
    Default: 'email-alert-history'
    
Resources: # This section defines the AWS resources to be created as part of the SAM application.
  # IAM role setting
  ReportFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "scheduler.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: S3ReadPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - s3:*
                  - s3-object-lambda:*
                Resource: '*'
        - PolicyName: SNSPublishMessagePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sns:*"
                Resource: '*'
        - PolicyName: LambdaBasicExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
        - PolicyName: GeneralPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - s3:*
                  - s3-object-lambda:*
                  - sns:*
                Resource: '*'
              - Sid: BedrockAll
                Effect: "Allow"
                Action:
                  - bedrock:*
                Resource: '*'
              - Sid: PassRoleToBedrock
                Effect: "Allow"
                Action:
                  - iam:PassRole
                Resource: arn:aws:iam::*:role/*AmazonBedrock*
                Condition:
                  StringEquals:
                    iam:PassedToService:
                      - bedrock.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess

  S3BucketCreation: # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-s3.html
    Type: AWS::S3::Bucket # Specifies the resource type
    Properties:
      BucketName: !Ref DataBucket

  LambdaFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./src # Path to your Lambda function code
      Handler: app.lambda_handler # mymodule.myfunction (python name.function name)
      Environment:
        Variables:
          REGION_NAME: !Sub ${AWS::Region} #!GetAtt MyParameter.Value
          BEDROCK_MODEL: !Ref BedrockModelId
          # EMAIL_ADDRESS: !Ref NotificationEmail
          NOTI_TABLE: !Ref NotiDB
          PARTITION_KEY: JobId
          SNS_ARN: !Ref NotificationSNSTopic # !GetAtt NotificationSNSTopic.Arn
          # SCORE_DATA: !Ref RCFScoreBucketCreation
          # SCORE_DATA: !Ref RCFScoreTable
          
      Architectures:
      - x86_64
      
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref DataBucket
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt NotificationSNSTopic.TopicName
        - DynamoDBReadPolicy:
            TableName: !Ref NotiDB
        - Statement:
            - Action:
                - s3:*
                - s3-object-lambda:*
                - sns:*
                - dynamodb:*
              Effect: Allow
              Resource: '*'
            
            - Sid: BedrockAll
              Effect: Allow
              Action:
                - bedrock:*
              Resource: '*'
            - Sid: PassRoleToBedrock
              Effect: Allow
              Action:
                - iam:PassRole
              Resource: arn:aws:iam::*:role/*AmazonBedrock*
              Condition:
                StringEquals:
                  iam:PassedToService:
                    - bedrock.amazonaws.com

      
      Events: # set the s3 trigger here
        MyS3Event:
          Type: S3 # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Bucket: !Ref S3BucketCreation # Specifies the S3 bucket from which the events will be triggered. 
            Events: s3:ObjectCreated:* #  Specifies the S3 events that trigger the Lambda function. In this example, we're triggering the function whenever an object is created (s3:ObjectCreated:*) in the bucket.
            Filter: 
              S3Key:
                Rules:
                  - Name: suffix
                    Value: '.csv'   
                    
  NotificationSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Ref NotificationSNSTopicName
      Subscription: 
        - Protocol: email
          Endpoint: !Ref NotificationEmail 
          
  EmailAlertHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref NotiDB 
      AttributeDefinitions:
        - AttributeName: JobId
          AttributeType: S
      # BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: JobId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5   
      SSESpecification:
        SSEEnabled: false  
  
  WeeklyReportFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src # Path to your Lambda function code
      Handler: weekly_report.gen_weekly_report # mymodule.myfunction (python name.function name)
      Description: Generates a weekly report
      Environment:
        Variables:
          REGION_NAME: !Sub ${AWS::Region} #!GetAtt MyParameter.Value
          BEDROCK_MODEL: !Ref BedrockModelId
          S3_BUCKET_NAME: !Ref DataBucket
          S3_OBJECT_KEY: 'anomaly_scores.csv'    # Replace with your object key
          SNS_ARN: !Ref ReportSNSTopic # !GetAtt NotificationSNSTopic.Arn
          
      Architectures:
      - x86_64
      Role: !GetAtt ReportFunctionRole.Arn
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:
            # Change the rate as needed
            # Schedule: rate(7 days)
            Schedule: rate(5 minutes)  # This example sets the rate to every 5 minutes
          
  ReportSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Ref ReportSNSTopicName
      Subscription: 
        - Protocol: email
          Endpoint: !Ref NotificationEmail 
          
          
          
